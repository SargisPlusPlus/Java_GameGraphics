import java.awt.Color;

//extending class
public class RacingSmiley extends AnimatedSmiley implements RacingSmileyInterface
{
	private int ticks; //ticks represting time
	private String name; // name for each smiley
	private Color nameColor; // the color of smileys name
	private int lapsCompleted; 
	boolean finished; //wheather finished or not
	String direction; //facing left or right at start
	final int LAPS=9; //laps to complete
	private int speed; // random speed
	private int originalSpeedx2; // initial speed *2

	
	// no-parameter constructor that makes a default Racing 
	// Smiley from scratch
	// this initalizes all the fields for the smiley at the begining of the race
	RacingSmiley(){
		super(10,0);
		this.lapsCompleted=0;
		this.ticks=0;
		finished = false;
		direction = "Right";
		speed=0;
		originalSpeedx2 = 2 * this.getCurrentXMovement();
	}
	
	// copy constructor that initializes a RacingSmiley 
	// from an existing AnimatedSmiley, a given name and name color
	// (Because a racing smiley is also an animated smileys, you 
	// can also use an existing RacingSmiley.)
	public RacingSmiley(AnimatedSmiley cntSmiley, String name, Color c){
		super(cntSmiley);
		this.lapsCompleted=0;
		this.ticks=0;
		finished = false;
		direction = "Right";
		speed=0;
		originalSpeedx2 = 2 * this.getCurrentXMovement();
		this.name = name;
		this.nameColor = c;
	}
	
	// finishedRace() returns true if the SmileyRacer has finished the race,
	// false if not.
	// checks if smiley has completed the required laps
	public boolean finishedRace()
	{
		if (getLapsCompleted()>=LAPS){
			this.finished = true;
			return true;
		}
		else
			return false;
	}

	
	// raceForOneTick() moves the racer forward the distance that it moves
	// for one tick.  Also, it increases the number of ticks that the racer
	// has been in the race.
	
	//moves a pixel at a time each smiley for the amount of its speed. 
	// depeing on the direction faced, the speed is either added/subtracted.
	// also makes sure that the smiley will not go out of bounds by restricting the boundaries of the display
	// makes sure that it wont go beyond if it has finished the race
	// finally, incremenets ticks
	public void raceForOneTick()
	{	
		for (int i = 0; i < Math.abs(this.getCurrentXMovement()); i++){
			if (this.direction == "Right"){
				this.translate(1, 0);
			}
			else if (this.direction == "Left"){
				this.translate(-1, 0);
			}
			if (this.getRightEdge()>=500){
				adjustDirection();
			}
			else if (this.getLeftEdge() <= 0){
				adjustDirection();
			}
			if (finishedRace())
				break;
		}
		ticks++;
	}

	//meaning it has completed a lap, laps get incremeneted
	// looks other direction,
	// the movement of direction is now the other way
	// also adjusts its speed
	private void adjustDirection()
	{
		lapsCompleted++;
		lookOtherDirection();	
		this.setCurrentXMovement(this.getCurrentXMovement()*(-1));
		adjustSpeed();
	}
	
	//makes sure that the adjiust speed will not be less than 1 or greater than 2 x original speed
	//if not, adjusts the speed by the number generated by the random generator when smileys got initialized
	public void adjustSpeed()
	{
		int changeSpeed = getSpeed();

		if ((Math.abs(this.getCurrentXMovement())+changeSpeed)>1 && (Math.abs(this.getCurrentXMovement())+changeSpeed)<this.originalSpeedx2){
			switch(getDirection()){
			case 0: //Left
				this.setCurrentXMovement(this.getCurrentXMovement()-changeSpeed);
				break;
			case 1: //right
				this.setCurrentXMovement(this.getCurrentXMovement()+changeSpeed);
				break;
			default:
				break;
			}
		}
	}

	//changes position of mouth and eyes and its direction
	private void lookOtherDirection()
	{
		swapMouth();
		swapEyes();
		if (this.direction == "Right")
			this.direction = "Left";
		else 
			this.direction = "Right";
	}
	
	private int getDirection(){
		if (this.direction=="Right")
			return 1;
		else return 0;
	}
	
	//if the left eye matches face color, the smiley is looking to the right. 
	//meaning that mouth will be placed on the other side of the face.
	//this is done by setting mouth on the smileys edge and y center
	private void swapMouth()
	{
		if (this.getLeftEye().getColor() == this.getFace().getColor()){
			this.getSmile().setCenter(this.getLeftEdge(), this.getSmile().getCenterY());
		}else{
			this.getSmile().setCenter(this.getRightEdge(), this.getSmile().getCenterY());
		}

	}

	//changes the color of the eyes by storing them in a separate variable
	private void swapEyes()
	{
		Color leftEye = this.getLeftEye().getColor();
		Color rightEye = this.getRightEye().getColor();
		this.getLeftEye().setColor(rightEye);
		this.getRightEye().setColor(leftEye);
	}

	//ticks getter
	public int getTicks()
	{
		return this.ticks;
	}

	//name getter
	public String getSmileyName()
	{
		return this.name;
	}

	//color getter
	public Color getSmileyNameColor()
	{
		return this.nameColor;
	}

	//laps completed getter
	public int getLapsCompleted()
	{
		return this.lapsCompleted;
	}
	
	//speed getter
	public int getSpeed(){
		return this.speed;	
	}
	
	//name color setter
	public void setSmileyNameColor(Color nameColor)
	{
		this.nameColor=nameColor;
	}
	
	//name setter
	public void setSmileyName(String name)
	{
		this.name=name;
	}
	
	//speed setter
	public void setSpeed(int speed){
		this.speed=speed;
	}

}
